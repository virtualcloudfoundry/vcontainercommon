// Code generated by protoc-gen-gogo.
// source: process.proto
// DO NOT EDIT!

package vcontainermodels

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Signal int32

const (
	SignalTerminate Signal = 0
	SignalKill      Signal = 1
)

var Signal_name = map[int32]string{
	0: "SignalTerminate",
	1: "SignalKill",
}
var Signal_value = map[string]int32{
	"SignalTerminate": 0,
	"SignalKill":      1,
}

func (Signal) EnumDescriptor() ([]byte, []int) { return fileDescriptorProcess, []int{0} }

type SignalRequest struct {
	Signal Signal `protobuf:"varint,1,opt,name=Signal,proto3,enum=vcontainermodels.Signal" json:"Signal,omitempty"`
}

func (m *SignalRequest) Reset()                    { *m = SignalRequest{} }
func (*SignalRequest) ProtoMessage()               {}
func (*SignalRequest) Descriptor() ([]byte, []int) { return fileDescriptorProcess, []int{0} }

func (m *SignalRequest) GetSignal() Signal {
	if m != nil {
		return m.Signal
	}
	return SignalTerminate
}

type WaitResponse struct {
	Exited   bool  `protobuf:"varint,1,opt,name=Exited,proto3" json:"Exited,omitempty"`
	ExitCode int32 `protobuf:"varint,2,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
}

func (m *WaitResponse) Reset()                    { *m = WaitResponse{} }
func (*WaitResponse) ProtoMessage()               {}
func (*WaitResponse) Descriptor() ([]byte, []int) { return fileDescriptorProcess, []int{1} }

func (m *WaitResponse) GetExited() bool {
	if m != nil {
		return m.Exited
	}
	return false
}

func (m *WaitResponse) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func init() {
	proto.RegisterType((*SignalRequest)(nil), "vcontainermodels.SignalRequest")
	proto.RegisterType((*WaitResponse)(nil), "vcontainermodels.WaitResponse")
	proto.RegisterEnum("vcontainermodels.Signal", Signal_name, Signal_value)
}
func (x Signal) String() string {
	s, ok := Signal_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SignalRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SignalRequest)
	if !ok {
		that2, ok := that.(SignalRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Signal != that1.Signal {
		return false
	}
	return true
}
func (this *WaitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WaitResponse)
	if !ok {
		that2, ok := that.(WaitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Exited != that1.Exited {
		return false
	}
	if this.ExitCode != that1.ExitCode {
		return false
	}
	return true
}
func (this *SignalRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vcontainermodels.SignalRequest{")
	s = append(s, "Signal: "+fmt.Sprintf("%#v", this.Signal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WaitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vcontainermodels.WaitResponse{")
	s = append(s, "Exited: "+fmt.Sprintf("%#v", this.Exited)+",\n")
	s = append(s, "ExitCode: "+fmt.Sprintf("%#v", this.ExitCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProcess(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SignalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Signal != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProcess(dAtA, i, uint64(m.Signal))
	}
	return i, nil
}

func (m *WaitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Exited {
		dAtA[i] = 0x8
		i++
		if m.Exited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ExitCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProcess(dAtA, i, uint64(m.ExitCode))
	}
	return i, nil
}

func encodeFixed64Process(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Process(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProcess(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignalRequest) Size() (n int) {
	var l int
	_ = l
	if m.Signal != 0 {
		n += 1 + sovProcess(uint64(m.Signal))
	}
	return n
}

func (m *WaitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Exited {
		n += 2
	}
	if m.ExitCode != 0 {
		n += 1 + sovProcess(uint64(m.ExitCode))
	}
	return n
}

func sovProcess(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProcess(x uint64) (n int) {
	return sovProcess(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SignalRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalRequest{`,
		`Signal:` + fmt.Sprintf("%v", this.Signal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WaitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WaitResponse{`,
		`Exited:` + fmt.Sprintf("%v", this.Exited) + `,`,
		`ExitCode:` + fmt.Sprintf("%v", this.ExitCode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProcess(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SignalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			m.Signal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signal |= (Signal(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exited = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcess(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProcess
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProcess
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProcess(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProcess = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcess   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("process.proto", fileDescriptorProcess) }

var fileDescriptorProcess = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0x4f,
	0x4e, 0x2d, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0x4b, 0xce, 0xcf, 0x2b,
	0x49, 0xcc, 0xcc, 0x4b, 0x2d, 0xca, 0xcd, 0x4f, 0x49, 0xcd, 0x29, 0x56, 0x72, 0xe4, 0xe2, 0x0d,
	0xce, 0x4c, 0xcf, 0x4b, 0xcc, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x32, 0xe0, 0x62,
	0x83, 0x08, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x49, 0xe8, 0xa1, 0xeb, 0xd1, 0x83, 0x6a,
	0x80, 0xaa, 0x53, 0x72, 0xe2, 0xe2, 0x09, 0x4f, 0xcc, 0x2c, 0x09, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf,
	0x2b, 0x4e, 0x15, 0x12, 0xe3, 0x62, 0x73, 0xad, 0xc8, 0x2c, 0x49, 0x4d, 0x01, 0x9b, 0xc0, 0x11,
	0x04, 0xe5, 0x09, 0x49, 0x71, 0x71, 0x80, 0x58, 0xce, 0xf9, 0x29, 0xa9, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0xac, 0x41, 0x70, 0xbe, 0x96, 0x2e, 0xcc, 0x56, 0x21, 0x61, 0x2e, 0x7e, 0x08, 0x2b, 0x24,
	0xb5, 0x28, 0x37, 0x33, 0x2f, 0xb1, 0x24, 0x55, 0x80, 0x41, 0x88, 0x8f, 0x8b, 0x0b, 0x22, 0xe8,
	0x9d, 0x99, 0x93, 0x23, 0xc0, 0xe8, 0xa4, 0x73, 0xe1, 0xa1, 0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c,
	0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x9e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x0e, 0xa5, 0xcf, 0xf8, 0x0d, 0x01, 0x00, 0x00,
}
