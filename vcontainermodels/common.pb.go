// Code generated by protoc-gen-gogo.
// source: common.proto
// DO NOT EDIT!

/*
	Package vcontainermodels is a generated protocol buffer package.

	It is generated from these files:
		common.proto
		container.proto
		garden.proto
		process.proto
		service.proto

	It has these top-level messages:
		VContainerClientConfig
		Error
		KeyValueMessage
		Properties
		ImageRef
		BindMount
		ProcessSpec
		RunResponse
		TTYSpec
		WindowSize
		ResourceLimits
		BandwidthLimits
		ProcessLimits
		DiskLimits
		MemoryLimits
		CPULimits
		PidLimits
		PortMapping
		StreamInSpec
		StreamInResponse
		StreamOutSpec
		StreamOutResponse
		ContainerInfo
		Metrics
		ContainerMemoryStat
		ContainerCPUStat
		ContainerDiskStat
		ContainerNetworkStat
		StopMessage
		NetInRequest
		NetInResponse
		IPRange
		PortRange
		ICMPControl
		NetOutRuleRequest
		BulkNetOutRuleRequest
		Capacity
		ContainerSpec
		Limits
		ContainerInfoEntry
		BulkInfoRequest
		BulkInfoResponse
		ContainerMetricsEntry
		BulkMetricsRequest
		BulkMetricsResponse
		SignalRequest
		WaitResponse
		ContainersResponse
		StopRequest
		StopResponse
*/
package vcontainermodels

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BindMountMode int32

const (
	BindMountModeRO BindMountMode = 0
	BindMountModeRW BindMountMode = 1
)

var BindMountMode_name = map[int32]string{
	0: "BindMountModeRO",
	1: "BindMountModeRW",
}
var BindMountMode_value = map[string]int32{
	"BindMountModeRO": 0,
	"BindMountModeRW": 1,
}

func (BindMountMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

type BindMountOrigin int32

const (
	BindMountOriginHost      BindMountOrigin = 0
	BindMountOriginContainer BindMountOrigin = 1
)

var BindMountOrigin_name = map[int32]string{
	0: "BindMountOriginHost",
	1: "BindMountOriginContainer",
}
var BindMountOrigin_value = map[string]int32{
	"BindMountOriginHost":      0,
	"BindMountOriginContainer": 1,
}

func (BindMountOrigin) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

type VContainerClientConfig struct {
	UseVContainer            bool   `protobuf:"varint,1,opt,name=UseVContainer,proto3" json:"use_vcontainer,omitempty" yaml:"use_vcontainer,omitempty"`
	VContainerAddress        string `protobuf:"bytes,2,opt,name=VContainerAddress,proto3" json:"vcontainer_address,omitempty" yaml:"vcontainer_address,omitempty"`
	VContainerCACertFile     string `protobuf:"bytes,3,opt,name=VContainerCACertFile,proto3" json:"vcontainer_ca_cert_file,omitempty" yaml:"vcontainer_ca_cert_file,omitempty"`
	VContainerClientCertFile string `protobuf:"bytes,4,opt,name=VContainerClientCertFile,proto3" json:"vcontainer_client_cert_file,omitempty" yaml:"vcontainer_client_cert_file,omitempty"`
	VContainerClientKeyFile  string `protobuf:"bytes,5,opt,name=VContainerClientKeyFile,proto3" json:"vcontainer_client_key_file,omitempty" yaml:"vcontainer_client_key_file,omitempty"`
}

func (m *VContainerClientConfig) Reset()                    { *m = VContainerClientConfig{} }
func (*VContainerClientConfig) ProtoMessage()               {}
func (*VContainerClientConfig) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *VContainerClientConfig) GetUseVContainer() bool {
	if m != nil {
		return m.UseVContainer
	}
	return false
}

func (m *VContainerClientConfig) GetVContainerAddress() string {
	if m != nil {
		return m.VContainerAddress
	}
	return ""
}

func (m *VContainerClientConfig) GetVContainerCACertFile() string {
	if m != nil {
		return m.VContainerCACertFile
	}
	return ""
}

func (m *VContainerClientConfig) GetVContainerClientCertFile() string {
	if m != nil {
		return m.VContainerClientCertFile
	}
	return ""
}

func (m *VContainerClientConfig) GetVContainerClientKeyFile() string {
	if m != nil {
		return m.VContainerClientKeyFile
	}
	return ""
}

type Error struct {
	Err string `protobuf:"bytes,1,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

func (m *Error) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type KeyValueMessage struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *KeyValueMessage) Reset()                    { *m = KeyValueMessage{} }
func (*KeyValueMessage) ProtoMessage()               {}
func (*KeyValueMessage) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

func (m *KeyValueMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Properties struct {
	Properties map[string]string `protobuf:"bytes,1,rep,name=Properties" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Properties) Reset()                    { *m = Properties{} }
func (*Properties) ProtoMessage()               {}
func (*Properties) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

func (m *Properties) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type ImageRef struct {
	URI      string `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *ImageRef) Reset()                    { *m = ImageRef{} }
func (*ImageRef) ProtoMessage()               {}
func (*ImageRef) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{4} }

func (m *ImageRef) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *ImageRef) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ImageRef) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type BindMount struct {
	// SrcPath contains the path of the directory to be mounted.
	SrcPath string `protobuf:"bytes,1,opt,name=SrcPath,proto3" json:"SrcPath,omitempty"`
	// DstPath contains the path of the mount point in the container. If the
	// directory does not exist, it is created.
	DstPath string `protobuf:"bytes,2,opt,name=DstPath,proto3" json:"DstPath,omitempty"`
	// Mode must be either "RO" or "RW". Alternatively, mode may be omitted and defaults to RO.
	// If mode is "RO", a read-only mount point is created.
	// If mode is "RW", a read-write mount point is created.
	Mode BindMountMode `protobuf:"varint,3,opt,name=Mode,proto3,enum=vcontainermodels.BindMountMode" json:"Mode,omitempty"`
	// BindMountOrigin must be either "Host" or "Container". Alternatively, origin may be omitted and
	// defaults to "Host".
	// If origin is "Host", src_path denotes a path in the host.
	// If origin is "Container", src_path denotes a path in the container.
	Origin BindMountOrigin `protobuf:"varint,4,opt,name=Origin,proto3,enum=vcontainermodels.BindMountOrigin" json:"Origin,omitempty"`
}

func (m *BindMount) Reset()                    { *m = BindMount{} }
func (*BindMount) ProtoMessage()               {}
func (*BindMount) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{5} }

func (m *BindMount) GetSrcPath() string {
	if m != nil {
		return m.SrcPath
	}
	return ""
}

func (m *BindMount) GetDstPath() string {
	if m != nil {
		return m.DstPath
	}
	return ""
}

func (m *BindMount) GetMode() BindMountMode {
	if m != nil {
		return m.Mode
	}
	return BindMountModeRO
}

func (m *BindMount) GetOrigin() BindMountOrigin {
	if m != nil {
		return m.Origin
	}
	return BindMountOriginHost
}

func init() {
	proto.RegisterType((*VContainerClientConfig)(nil), "vcontainermodels.VContainerClientConfig")
	proto.RegisterType((*Error)(nil), "vcontainermodels.Error")
	proto.RegisterType((*KeyValueMessage)(nil), "vcontainermodels.KeyValueMessage")
	proto.RegisterType((*Properties)(nil), "vcontainermodels.Properties")
	proto.RegisterType((*ImageRef)(nil), "vcontainermodels.ImageRef")
	proto.RegisterType((*BindMount)(nil), "vcontainermodels.BindMount")
	proto.RegisterEnum("vcontainermodels.BindMountMode", BindMountMode_name, BindMountMode_value)
	proto.RegisterEnum("vcontainermodels.BindMountOrigin", BindMountOrigin_name, BindMountOrigin_value)
}
func (x BindMountMode) String() string {
	s, ok := BindMountMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BindMountOrigin) String() string {
	s, ok := BindMountOrigin_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *VContainerClientConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VContainerClientConfig)
	if !ok {
		that2, ok := that.(VContainerClientConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UseVContainer != that1.UseVContainer {
		return false
	}
	if this.VContainerAddress != that1.VContainerAddress {
		return false
	}
	if this.VContainerCACertFile != that1.VContainerCACertFile {
		return false
	}
	if this.VContainerClientCertFile != that1.VContainerClientCertFile {
		return false
	}
	if this.VContainerClientKeyFile != that1.VContainerClientKeyFile {
		return false
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *KeyValueMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KeyValueMessage)
	if !ok {
		that2, ok := that.(KeyValueMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Properties) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Properties)
	if !ok {
		that2, ok := that.(Properties)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if this.Properties[i] != that1.Properties[i] {
			return false
		}
	}
	return true
}
func (this *ImageRef) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImageRef)
	if !ok {
		that2, ok := that.(ImageRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.URI != that1.URI {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *BindMount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BindMount)
	if !ok {
		that2, ok := that.(BindMount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SrcPath != that1.SrcPath {
		return false
	}
	if this.DstPath != that1.DstPath {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	return true
}
func (this *VContainerClientConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&vcontainermodels.VContainerClientConfig{")
	s = append(s, "UseVContainer: "+fmt.Sprintf("%#v", this.UseVContainer)+",\n")
	s = append(s, "VContainerAddress: "+fmt.Sprintf("%#v", this.VContainerAddress)+",\n")
	s = append(s, "VContainerCACertFile: "+fmt.Sprintf("%#v", this.VContainerCACertFile)+",\n")
	s = append(s, "VContainerClientCertFile: "+fmt.Sprintf("%#v", this.VContainerClientCertFile)+",\n")
	s = append(s, "VContainerClientKeyFile: "+fmt.Sprintf("%#v", this.VContainerClientKeyFile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vcontainermodels.Error{")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyValueMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vcontainermodels.KeyValueMessage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Properties) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vcontainermodels.Properties{")
	keysForProperties := make([]string, 0, len(this.Properties))
	for k, _ := range this.Properties {
		keysForProperties = append(keysForProperties, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProperties)
	mapStringForProperties := "map[string]string{"
	for _, k := range keysForProperties {
		mapStringForProperties += fmt.Sprintf("%#v: %#v,", k, this.Properties[k])
	}
	mapStringForProperties += "}"
	if this.Properties != nil {
		s = append(s, "Properties: "+mapStringForProperties+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vcontainermodels.ImageRef{")
	s = append(s, "URI: "+fmt.Sprintf("%#v", this.URI)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BindMount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&vcontainermodels.BindMount{")
	s = append(s, "SrcPath: "+fmt.Sprintf("%#v", this.SrcPath)+",\n")
	s = append(s, "DstPath: "+fmt.Sprintf("%#v", this.DstPath)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCommon(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VContainerClientConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VContainerClientConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UseVContainer {
		dAtA[i] = 0x8
		i++
		if m.UseVContainer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.VContainerAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.VContainerAddress)))
		i += copy(dAtA[i:], m.VContainerAddress)
	}
	if len(m.VContainerCACertFile) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.VContainerCACertFile)))
		i += copy(dAtA[i:], m.VContainerCACertFile)
	}
	if len(m.VContainerClientCertFile) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.VContainerClientCertFile)))
		i += copy(dAtA[i:], m.VContainerClientCertFile)
	}
	if len(m.VContainerClientKeyFile) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.VContainerClientKeyFile)))
		i += copy(dAtA[i:], m.VContainerClientKeyFile)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	return i, nil
}

func (m *KeyValueMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Properties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for k, _ := range m.Properties {
			dAtA[i] = 0xa
			i++
			v := m.Properties[k]
			mapSize := 1 + len(k) + sovCommon(uint64(len(k))) + 1 + len(v) + sovCommon(uint64(len(v)))
			i = encodeVarintCommon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommon(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *ImageRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.URI) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *BindMount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindMount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SrcPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SrcPath)))
		i += copy(dAtA[i:], m.SrcPath)
	}
	if len(m.DstPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.DstPath)))
		i += copy(dAtA[i:], m.DstPath)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Mode))
	}
	if m.Origin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Origin))
	}
	return i, nil
}

func encodeFixed64Common(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Common(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VContainerClientConfig) Size() (n int) {
	var l int
	_ = l
	if m.UseVContainer {
		n += 2
	}
	l = len(m.VContainerAddress)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.VContainerCACertFile)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.VContainerClientCertFile)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.VContainerClientKeyFile)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *KeyValueMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Properties) Size() (n int) {
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + 1 + len(v) + sovCommon(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ImageRef) Size() (n int) {
	var l int
	_ = l
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *BindMount) Size() (n int) {
	var l int
	_ = l
	l = len(m.SrcPath)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.DstPath)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovCommon(uint64(m.Mode))
	}
	if m.Origin != 0 {
		n += 1 + sovCommon(uint64(m.Origin))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VContainerClientConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VContainerClientConfig{`,
		`UseVContainer:` + fmt.Sprintf("%v", this.UseVContainer) + `,`,
		`VContainerAddress:` + fmt.Sprintf("%v", this.VContainerAddress) + `,`,
		`VContainerCACertFile:` + fmt.Sprintf("%v", this.VContainerCACertFile) + `,`,
		`VContainerClientCertFile:` + fmt.Sprintf("%v", this.VContainerClientCertFile) + `,`,
		`VContainerClientKeyFile:` + fmt.Sprintf("%v", this.VContainerClientKeyFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValueMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValueMessage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Properties) String() string {
	if this == nil {
		return "nil"
	}
	keysForProperties := make([]string, 0, len(this.Properties))
	for k, _ := range this.Properties {
		keysForProperties = append(keysForProperties, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProperties)
	mapStringForProperties := "map[string]string{"
	for _, k := range keysForProperties {
		mapStringForProperties += fmt.Sprintf("%v: %v,", k, this.Properties[k])
	}
	mapStringForProperties += "}"
	s := strings.Join([]string{`&Properties{`,
		`Properties:` + mapStringForProperties + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageRef{`,
		`URI:` + fmt.Sprintf("%v", this.URI) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BindMount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BindMount{`,
		`SrcPath:` + fmt.Sprintf("%v", this.SrcPath) + `,`,
		`DstPath:` + fmt.Sprintf("%v", this.DstPath) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommon(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VContainerClientConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VContainerClientConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VContainerClientConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseVContainer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseVContainer = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VContainerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VContainerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VContainerCACertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VContainerCACertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VContainerClientCertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VContainerClientCertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VContainerClientKeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VContainerClientKeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthCommon
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthCommon
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Properties[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Properties[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindMount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindMount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindMount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (BindMountMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (BindMountOrigin(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("common.proto", fileDescriptorCommon) }

var fileDescriptorCommon = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x41, 0x4f, 0x13, 0x4f,
	0x1c, 0xed, 0x00, 0xe5, 0x0f, 0xf3, 0x17, 0xa8, 0x03, 0x91, 0x95, 0x90, 0x5d, 0x58, 0x35, 0x69,
	0xb0, 0x96, 0x04, 0x2e, 0x42, 0x62, 0x0c, 0xad, 0x28, 0xa4, 0x12, 0x70, 0xb4, 0x10, 0x4f, 0xcd,
	0xd2, 0xfe, 0xba, 0x6c, 0xe8, 0xee, 0x90, 0xd9, 0x29, 0x66, 0x6f, 0x5e, 0xbc, 0xeb, 0xc1, 0x83,
	0xdf, 0xc0, 0x78, 0xf1, 0x6b, 0x78, 0xe4, 0xe8, 0xa9, 0xb1, 0xeb, 0xc5, 0xf4, 0x44, 0xfc, 0x04,
	0x66, 0x67, 0xd9, 0x76, 0xdb, 0xa5, 0xdc, 0xe6, 0xcd, 0x7b, 0xbf, 0xf7, 0x5e, 0xdb, 0xdf, 0x14,
	0xdf, 0xaa, 0x32, 0xdb, 0x66, 0x4e, 0xfe, 0x8c, 0x33, 0xc1, 0x48, 0xe6, 0xbc, 0xca, 0x1c, 0x61,
	0x58, 0x0e, 0x70, 0x9b, 0xd5, 0xa0, 0xe1, 0x2e, 0x3c, 0x32, 0x2d, 0x71, 0xd2, 0x3c, 0xce, 0x57,
	0x99, 0xbd, 0x6a, 0x32, 0x93, 0xad, 0x4a, 0xe1, 0x71, 0xb3, 0x2e, 0x91, 0x04, 0xf2, 0x14, 0x1a,
	0xe8, 0xdf, 0xd2, 0xf8, 0xce, 0x61, 0x31, 0xf2, 0x28, 0x36, 0x2c, 0x70, 0x44, 0x91, 0x39, 0x75,
	0xcb, 0x24, 0x80, 0xa7, 0xca, 0x2e, 0xf4, 0x48, 0x05, 0x2d, 0xa1, 0xec, 0x44, 0xe1, 0x69, 0xa7,
	0xa5, 0x29, 0x4d, 0x17, 0x2a, 0xbd, 0xe8, 0x1c, 0xb3, 0x2d, 0x01, 0xf6, 0x99, 0xf0, 0xfe, 0xb6,
	0x34, 0xcd, 0x33, 0xec, 0xc6, 0xa6, 0x3e, 0x4c, 0xa1, 0xd3, 0x7e, 0x57, 0xd2, 0xc4, 0xb7, 0x7b,
	0x68, 0xab, 0x56, 0xe3, 0xe0, 0xba, 0xca, 0xc8, 0x12, 0xca, 0x4e, 0x16, 0x5e, 0x74, 0x5a, 0xda,
	0x62, 0xcf, 0xa4, 0x62, 0x84, 0x6c, 0x5f, 0xdc, 0xbd, 0x30, 0xee, 0x26, 0x95, 0x4e, 0x93, 0x09,
	0xe4, 0x03, 0xc2, 0x73, 0xb1, 0x0f, 0xbe, 0x55, 0x04, 0x2e, 0x9e, 0x5b, 0x0d, 0x50, 0x46, 0x65,
	0xf4, 0xab, 0x4e, 0x4b, 0x5b, 0x8e, 0x99, 0x56, 0x8d, 0x4a, 0x15, 0xb8, 0xa8, 0xd4, 0xad, 0x06,
	0xf4, 0xe5, 0x67, 0x13, 0xf9, 0xd7, 0x4b, 0x75, 0x7a, 0x6d, 0x1c, 0xf9, 0x8c, 0xb0, 0x92, 0xf8,
	0x01, 0xa2, 0x2e, 0x63, 0xb2, 0xcb, 0xdb, 0x4e, 0x4b, 0x7b, 0x10, 0x0f, 0x90, 0xa2, 0x21, 0x7d,
	0x72, 0xc9, 0x3e, 0x43, 0xe5, 0x3a, 0x1d, 0x1a, 0x4d, 0x3e, 0x21, 0x3c, 0x3f, 0x48, 0x96, 0xc0,
	0x93, 0xb5, 0xd2, 0xb2, 0xd6, 0x51, 0xa7, 0xa5, 0xdd, 0x4f, 0xe6, 0x9c, 0x82, 0x97, 0x6c, 0xf5,
	0x70, 0x58, 0xab, 0xa4, 0x5a, 0xa7, 0xc3, 0x72, 0xf5, 0xbb, 0x38, 0xbd, 0xcd, 0x39, 0xe3, 0x24,
	0x83, 0x47, 0xb7, 0x79, 0xb8, 0x90, 0x93, 0x34, 0x38, 0xea, 0x1b, 0x78, 0xa6, 0x04, 0xde, 0xa1,
	0xd1, 0x68, 0xc2, 0x1e, 0xb8, 0xae, 0x61, 0x42, 0x20, 0x2a, 0x81, 0x17, 0x89, 0x4a, 0xe0, 0x91,
	0x39, 0x9c, 0x96, 0x8a, 0x70, 0xbd, 0x68, 0x08, 0xf4, 0x2f, 0x08, 0xe3, 0x03, 0xce, 0xce, 0x80,
	0x0b, 0x0b, 0x5c, 0xf2, 0x32, 0x8e, 0x14, 0xb4, 0x34, 0x9a, 0xfd, 0x7f, 0x2d, 0x97, 0x1f, 0x7c,
	0x67, 0xf9, 0x9e, 0x26, 0x76, 0xdc, 0x76, 0x04, 0xf7, 0x68, 0x6c, 0x7e, 0xe1, 0x09, 0x9e, 0x19,
	0xa0, 0x83, 0x5e, 0xa7, 0xbd, 0x5e, 0xa7, 0x61, 0xaf, 0xf3, 0x78, 0x2f, 0x09, 0x36, 0x47, 0x1e,
	0x23, 0xfd, 0x0d, 0x9e, 0xd8, 0xb5, 0x0d, 0x13, 0x28, 0xd4, 0x83, 0xb9, 0x32, 0xdd, 0x8d, 0xe6,
	0xca, 0x74, 0x97, 0x2c, 0xe0, 0x89, 0xb2, 0x0b, 0xdc, 0x31, 0xec, 0x68, 0xb4, 0x8b, 0x03, 0xee,
	0xc0, 0x70, 0xdd, 0x77, 0x8c, 0xd7, 0xc2, 0x95, 0xa6, 0x5d, 0xac, 0x7f, 0x47, 0x78, 0xb2, 0x60,
	0x39, 0xb5, 0x3d, 0xd6, 0x74, 0x04, 0x51, 0xf0, 0x7f, 0xaf, 0x79, 0xf5, 0xc0, 0x10, 0x27, 0x57,
	0xde, 0x11, 0x0c, 0x98, 0x67, 0xae, 0x90, 0x4c, 0x68, 0x1f, 0x41, 0xb2, 0x8e, 0xc7, 0xf6, 0x58,
	0x2d, 0x7c, 0x2c, 0xd3, 0x6b, 0x5a, 0xf2, 0xeb, 0xe9, 0xda, 0x07, 0x32, 0x2a, 0xc5, 0x64, 0x03,
	0x8f, 0xef, 0x73, 0xcb, 0xb4, 0x1c, 0xb9, 0xd7, 0xd3, 0x6b, 0xcb, 0x37, 0x8c, 0x85, 0x42, 0x7a,
	0x35, 0xb0, 0xb2, 0x81, 0xa7, 0xfa, 0x1c, 0xc9, 0x2c, 0x9e, 0xe9, 0x8f, 0xd8, 0xcf, 0xa4, 0x92,
	0x97, 0x47, 0x19, 0xb4, 0xb2, 0x13, 0xbb, 0x0c, 0xdd, 0xc8, 0x3c, 0x9e, 0x1d, 0xb8, 0xda, 0x61,
	0xae, 0xc8, 0xa4, 0xc8, 0x22, 0x56, 0x06, 0x88, 0xee, 0x26, 0x66, 0x50, 0x21, 0x77, 0xd1, 0x56,
	0x53, 0x3f, 0xdb, 0x6a, 0xea, 0xb2, 0xad, 0xa2, 0xf7, 0xbe, 0x8a, 0xbe, 0xfa, 0x2a, 0xfa, 0xe1,
	0xab, 0xe8, 0xc2, 0x57, 0xd1, 0x2f, 0x5f, 0x45, 0x7f, 0x7c, 0x35, 0x75, 0xe9, 0xab, 0xe8, 0xe3,
	0x6f, 0x35, 0x75, 0x3c, 0x2e, 0xff, 0x60, 0xd7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x97,
	0x17, 0x4f, 0xb1, 0x05, 0x00, 0x00,
}
